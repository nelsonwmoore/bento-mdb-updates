name: liquibase-update

on:
  push:
    branches:
      - dev
    paths:
      - ".github/data/output/model_changelogs/**"
  workflow_dispatch:
    inputs:
      changeLogFile:
        description: "Path to the Liquibase changelog file to update"
        required: false

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changed-files.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: dev
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Get list of added/modified files
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} -- ".github/data/output/model_changelogs/" | grep -E "\.xml$")
            # Convert to JSON array
            JSON_ARRAY=$(echo "$CHANGED_FILES" | jq -R -s -c 'split("\n")[:-1]')
            echo "matrix={\"include\":$(echo "$JSON_ARRAY" | jq -c '[.[] | {changelogFile: .}]')}" >> $GITHUB_OUTPUT
          else
            # Handle manual trigger
            echo "matrix={\"include\":[{\"changelogFile\":\"${{ github.event.inputs.changeLogFile }}\"}]}" >> $GITHUB_OUTPUT
          fi

  liquibase-update:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: dev

      - name: Run liquibase update for each file
        uses: liquibase-github-actions/update@v4.31.0
        with:
          changelogFile: ${{ matrix.changeLogFile }}
          url: ${{ secrets.NEO4J_MDB_URI }}
          username: ${{ secrets.NEO4J_MDB_USER }}
          password: ${{ secrets.NEO4J_MDB_PASS }}

  update-datahub-terms:
    runs-on: ubuntu-latest
    needs: [detect-changes, liquibase-update]
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
    - name: Checkout bento-mdb-updates repository
      uses: actions/checkout@v3
      with:
        ref: dev

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Generate Permissible Values JSON
      id: generate-pv-json
      run: |
        python get_pvs_json --model ${{ model }} --version ${{ version }} > ${{ model }}_${{ version }}_sts.json
        echo "Generated report:"
        cat report.json
      
    - name: Checkout crdc-datahub-terms repository
      uses: actions/checkout@v3
      with:
        repository: your-org/crdc-datahub-terms
        ref: dev2  # or qa2, depending on which branch you want to update
        token: ${{ secrets.GH_PAT }}  # a PAT with push permissions for the target repo
        path: datahub-repo

    - name: Copy report to crdc-datahub-terms repo
      run: |
        cp ${{ model }}_${{ version }}_sts.json crdc-datahub-terms/ 
        echo "Copied ${{ model }}_${{ version }}_sts.json to crdc-datahub-terms/ directory."

    - name: Commit and push report
      working-directory: datahub-repo
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add ${{ model }}_${{ version }}_sts.json
        git commit -m "Update STS JSON for ${{ model }}_v${{ version }}"
        git push
name: Update MDB and Data Hub Terms

on:
  workflow_call:
    inputs:
      mdb_uri:
        description: "metamodel database URI"
        required: true
        type: string
      mdb_user:
        description: "metamodel database username"
        required: true
        type: string
      changelog_files:
        description: "JSON array of changelog files to update"
        required: true
        type: string
      mdb_id:
        description: "ID of MDB to update"
        required: true
        type: string
      dh_tier:
        description: "Data Hub tier to update"
        required: true
        type: string
      log_level:
        description: "Log level"
        required: false
        type: string
        default: "info"
      dry_run:
        description: "Dry run flag"
        required: false
        type: boolean
        default: false
      no_commit:
        description: "Don't commit changes to GitHub."
        required: false
        type: boolean
        default: false
    secrets:
      PREFECT_API_KEY:
        required: true
      PREFECT_API_URL:
        required: true
      GH_PAT:
        required: true

jobs:
  update-mdb-and-dh:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744
        with: # latest version of branch to get files committed in prev job
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@d4b2f3b6ecc6e67c4457f6d3e41ec42d3d0fcb86
        with:
          version: "0.5.10"

      - name: Install dependencies and project
        run: |
          uv pip install --system -e .
          uv sync --all-extras --dev

      - name: Run liquibase update on changelog files
        id: liquibase-update
        env:
          PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
          PREFECT_API_URL: ${{ secrets.PREFECT_API_URL }}
        run: |
          echo "Processing the following changelog files:"
          echo '${{ inputs.changelog_files }}' | jq -r '.[]'
          
          RUN_IDS=()

          for file in $(echo '${{ inputs.changelog_files }}' | jq -r '.[]'); do
            echo "Queueing $file"

            if [ ! -f "$file" ]; then
              echo "Warning: Changelog file $file does not exist, skipping"
              continue
            fi

            PARAMS=$(jq -n \
            --arg uri "${{ inputs.mdb_uri }}" \
            --arg user "${{ inputs.mdb_user }}" \
            --arg file "$file" \
            --arg id "${{ inputs.mdb_id }}" \
            --arg log_level "${{ inputs.log_level || 'info' }}" \
            --arg tier "${{ inputs.dh_tier }}" \
            --argjson dry_run "${{ inputs.dry_run || false }}" \
            --argjson no_commit "${{ inputs.no_commit || false }}" \
            '{
              "mdb_uri": $uri,
              "mdb_user": $user,
              "changelog_file": $file,
              "mdb_id": $id,
              "log_level": $log_level,
              "tier": $tier,
              "dry_run": $dry_run,
              "no_commit": $no_commit
            }')

            OUTPUT=$(prefect deployment run update-mdb-and-dh/update-mdb-and-dh \
              --params "$PARAMS" 2>&1)

            RUN_ID=$(echo "$OUTPUT" | grep -oP "(?<=UUID:\s)[0-9a-fA-F-]+" | head -n1)

            if [ -n "$RUN_ID" ]; then
              echo "Created flow run $RUN_ID for $file"
              RUN_IDS+=("$RUN_ID:$file")
            else
              echo "Failed to create flow run for $file"
            fi
          done

          echo "Monitoring ${#RUN_IDS[@]} flow runs..."

          for run_info in "${RUN_IDS[@]}"; do
            IFS=':' read -r run_id file <<< "$run_info"
            echo "Watching flow run $run_id for $file"
            
            # Use the same watch approach as the term update workflow
            prefect flow-run watch "$run_id" \
              --interval 30 || {
                # If watch fails, check if it actually completed
                STATE=$(prefect flow-run inspect "$run_id" | jq -r '.state_name // empty')
                if [ "$STATE" = "Completed" ]; then
                  echo "Flow run completed successfully"
                else
                  echo "Flow run failed or watch error occurred"
                  exit 1
                fi
              }
          done
name: Generate and Commit Model Updates Changelogs

on:
  push:
    branches:
      - main
    paths:
      - config/mdb_models.yml
  workflow_dispatch: # update an mdb with a certain model version
    inputs:
      models_spec_path:
        description: "Path to YAML files with models & refs their MDFs."
        required: false
        default: "config/mdb_models.yml"
      model:
        description: "Specific model handle to process"
        required: false
        default: ""
      version:
        description: "Specific version to process"
        required: false
        default: ""
      mdf_files:
        description: "Path or URL to specific MDF files to process"
        required: false
        default: ""
      datahub_only:
        description: "Only include datahub models"
        required: false
        type: boolean
        default: false
      mdb_id:
        description: "ID of MDB to update"
        required: true
        type: string
      dh_tier:
        description: "Data Hub tier to update"
        required: true
        type: choice
        options:
          - "upper"
          - "lower"
          - "both"
        default: "both"
      log_level:
        description: "Log level"
        required: false
        type: string
        default: "info"
      dry_run:
        description: "Dry run flag"
        required: false
        type: boolean
        default: false
      no_commit:
        description: "Don't commit changes to GitHub."
        required: false
        type: boolean
        default: false
      model_changelog_path:
        description: "Path to output model changelog file"
        required: false
        type: string
      author:
        description: "Author name for changes"
        required: false
        default: "GitHub Actions"
        type: string
      commit_sha:
        description: "Commit SHA for reference"
        required: false
        default: ""
        type: string
      add_rollback:
        description: "Add rollback statements to changelog"
        required: false
        type: boolean
        default: false
      latest_version:
        description: "Is this the latest data model version?"
        required: false
        type: boolean
        default: true

jobs:
  determine-models:
    runs-on: ubuntu-latest
    outputs:
      affected_models: ${{ steps.set-matrix.outputs.model_matrix }}
      affected_models_upper: ${{ steps.set-matrix.outputs.model_matrix_upper }}
      affected_models_lower: ${{ steps.set-matrix.outputs.model_matrix_lower }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744
        with:
          ref: ${{ github.ref }}

      - name: Install Python
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@d4b2f3b6ecc6e67c4457f6d3e41ec42d3d0fcb86
        with:
          version: "0.5.10"

      - name: Install dependencies and project
        run: |
          uv pip install --system -e .
          uv sync --all-extras --dev

      - name: Generate Model Version Matrix
        id: set-matrix
        env:
          PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
          PREFECT_API_URL: ${{ secrets.PREFECT_API_URL }}
        run: |
          set -xeuo pipefail
          trap 'echo "Error in $BASH_COMMAND at line $LINENO (exit code $?)"' ERR

          UPPER_MDB_URI="jdbc:neo4j:bolt://ip-172-30-0-18.ec2.internal:8687"
          LOWER_MDB_URI="jdbc:neo4j:bolt://ip-172-30-0-18.ec2.internal:8587"

          IS_AUTOMATIC="false"
          if [ "${{ github.event_name }} " == "push" ]; then
            IS_AUTOMATIC="true"
          fi

          if [ "$IS_AUTOMATIC" == "true" ]; then
            TIER="both"
            UPPER_MDB_ID="og-mdb-dev"
            LOWER_MDB_ID="og-mdb-nightly"
          else
            TIER="${{ github.event.inputs.dh_tier }}"
            MDB_ID="${{ github.event.inputs.mdb_id }}"
            if [ "$MDB_ID" == "og-mdb-dev" ]; then
              UPPER_MDB_ID="og-mdb-dev"
              LOWER_MDB_ID=""
              TIER="upper"
            elif [ "$MDB_ID" == "og-mdb-nightly" ]; then
              UPPER_MDB_ID=""
              LOWER_MDB_ID="og-mdb-nightly"
              TIER="lower"
            fi
          fi

          # If specific model/version/mdfs provided, use them
          if [ "${{ github.event.inputs.model }}" != "" ] && [ "${{ github.event.inputs.version }}" != "" ]; then
            MODEL_INFO="{\"model\": \"${{ github.event.inputs.model }}\", \"version\": \"${{ github.event.inputs.version }}\", \"mdf_files\": [${{ github.event.inputs.mdf_files || '[]' }}]}"
            if [ -n "$UPPER_MDB_ID" ]; then
              echo "{\"include\": [$MODEL_INFO]}" > matrix_upper.json
            else
              echo "{\"include\": []}" > matrix_upper.json
            fi            
            if [ -n "$LOWER_MDB_ID" ]; then
              echo "{\"include\": [$MODEL_INFO]}" > matrix_lower.json
            else
              echo "{\"include\": []}" > matrix_lower.json
            fi
          else
            # otherwise, generate the full matrix for both tiers
            if [ -n "$UPPER_MDB_ID" ]; then
              UPPER_PARAMS=$(jq -n \
              --arg mdb_uri "$UPPER_MDB_URI" \
              --arg mdb_user "neo4j" \
              --arg mdb_id "$UPPER_MDB_ID" \
              --arg model_specs_yaml "${{ github.event.inputs.models_spec_path || 'config/mdb_models.yml' }}" \
              --argjson datahub_only "${{ github.event.inputs.datahub_only || false }}" \
              '{
                "mdb_uri": $mdb_uri,
                "mdb_user": $mdb_user,
                "mdb_id": $mdb_id,
                "model_specs_yaml": $model_specs_yaml,
                "datahub_only": $datahub_only
              }')
              echo "Running Prefect deployment for upper tier with params: $UPPER_PARAMS"

              watch_out_upper=$(
                prefect deployment run generate-model-version-matrix/generate-model-version-matrix \
                  --params "$UPPER_PARAMS" \
                  --watch \
                  --watch-interval 30 2>&1 | tee watch_upper.log
              )
              echo "watch_out_upper=$watch_out_upper"
              
              UPPER_RUN_ID=$(
                grep -oP "(?<=UUID:\s)[0-9a-fA-F-]+" watch_upper.log \
                | head -n1
              )
              echo "Upper tier run ID: $UPPER_RUN_ID"

              UPPER_LOG_FILE="${UPPER_RUN_ID}_run.log"
              prefect flow-run logs "$UPPER_RUN_ID" > "$UPPER_LOG_FILE"
              
              echo "Checking for MATRIX_JSON in upper tier logs:"
              grep -a "MATRIX_JSON" "$UPPER_LOG_FILE" || echo "No MATRIX_JSON found in upper tier logs"
              
              MATRIX_OUTPUT=$(grep -a -m1 "MATRIX_JSON:" "$UPPER_LOG_FILE" \
                | grep -oP 'MATRIX_JSON:\K\{.*\}' \
                || echo "")
              
              if [ -n "$MATRIX_OUTPUT" ]; then
                echo "$MATRIX_OUTPUT" > matrix_upper.json
                echo "Upper tier matrix extracted successfully"
              else
                echo "Warning: Could not extract matrix from upper tier deployment output"
                echo "{\"include\": []}" > matrix_upper.json
              fi
            else
              echo "{\"include\": []}" > matrix_upper.json
            fi

            if [ -n "$LOWER_MDB_ID" ]; then
              LOWER_PARAMS=$(jq -n \
                --arg mdb_uri "$LOWER_MDB_URI" \
                --arg mdb_user "neo4j" \
                --arg mdb_id "$LOWER_MDB_ID" \
                --arg model_specs_yaml "${{ github.event.inputs.models_spec_path || 'config/mdb_models.yml' }}" \
                --argjson datahub_only "${{ github.event.inputs.datahub_only || false }}" \
                '{
                  "mdb_uri": $mdb_uri,
                  "mdb_user": $mdb_user,
                  "mdb_id": $mdb_id,
                  "model_specs_yaml": $model_specs_yaml,
                  "datahub_only": $datahub_only,
                }')
              
              echo "Running Prefect deployment for lower tier with params: $LOWER_PARAMS"

              watch_out_lower=$(
                prefect deployment run generate-model-version-matrix/generate-model-version-matrix \
                  --params "$LOWER_PARAMS" \
                  --watch \
                  --watch-interval 30 2>&1 | tee watch_lower.log
              )
              echo "watch_out_lower=$watch_out_lower"
              
              LOWER_RUN_ID=$(
                grep -oP "(?<=UUID:\s)[0-9a-fA-F-]+" watch_lower.log \
                | head -n1
              )
              echo "Lower tier run ID: $LOWER_RUN_ID"

              LOWER_LOG_FILE="${LOWER_RUN_ID}_run.log"
              prefect flow-run logs "$LOWER_RUN_ID" > "$LOWER_LOG_FILE"
              
              echo "Checking for MATRIX_JSON in lower tier logs:"
              grep -a "MATRIX_JSON" "$LOWER_LOG_FILE" || echo "No MATRIX_JSON found in lower tier logs"
              
              MATRIX_OUTPUT=$(grep -a -m1 "MATRIX_JSON:" "$LOWER_LOG_FILE" \
                | grep -oP 'MATRIX_JSON:\K\{.*\}' \
                || echo "")

              if [ -n "$MATRIX_OUTPUT" ]; then
                echo "$MATRIX_OUTPUT" > matrix_lower.json
                echo "Lower tier matrix extracted successfully"
              else
                echo "Warning: Could not extract matrix from lower tier deployment output"
                echo "{\"include\": []}" > matrix_lower.json
              fi
            else
              echo "{\"include\": []}" > matrix_lower.json
            fi
          fi

          # validate json
          if ! jq . matrix_upper.json > /dev/null 2>&1; then
            echo "Error: Invalid JSON in matrix_upper.json"
            exit 1
          fi
          
          if ! jq . matrix_lower.json > /dev/null 2>&1; then
            echo "Error: Invalid JSON in matrix_lower.json"
            exit 1
          fi

          UPPER_MATRIX=$(cat matrix_upper.json)
          LOWER_MATRIX=$(cat matrix_lower.json)

          COMBINED_INCLUDE=$(jq -s '.[0].include + .[1].include | unique_by(.model + .version)' matrix_upper.json matrix_lower.json)
          COMBINED_MATRIX="{\"include\": $COMBINED_INCLUDE}"
          
          echo "model_matrix=$COMBINED_MATRIX" >> $GITHUB_OUTPUT
          echo "model_matrix_upper=$UPPER_MATRIX" >> $GITHUB_OUTPUT
          echo "model_matrix_lower=$LOWER_MATRIX" >> $GITHUB_OUTPUT
          
          echo "Combined matrix: $COMBINED_MATRIX"
          echo "Upper tier matrix: $UPPER_MATRIX"
          echo "Lower tier matrix: $LOWER_MATRIX"

  generate-changelogs:
    needs: determine-models
    runs-on: ubuntu-latest
    outputs:
      changelog_files: ${{ steps.collect-changelogs.outputs.changelog_files }}
    strategy:
      matrix: ${{ fromJson(needs.determine-models.outputs.affected_models) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744
        with:
          ref: ${{ github.ref }}

      - name: Install Python
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@d4b2f3b6ecc6e67c4457f6d3e41ec42d3d0fcb86
        with:
          version: "0.5.10"

      - name: Install dependencies and project
        run: |
          uv pip install --system -e .
          uv sync --all-extras --dev

      - name: Make Model Changelog
        run: |
          set -e

          MDF_FILES_OPTIONS=""
          if [ -n "${{ toJson(matrix.mdf_files) }}" ] && [ "${{ toJson(matrix.mdf_files) }}" != "null" ] && [ "${{ toJson(matrix.mdf_files) }}" != "[]" ]; then
            for file in $(echo '${{ toJson(matrix.mdf_files) }}' | jq -r '.[]'); do
              MDF_FILES_OPTIONS+=" --mdf_files \"$file\""
            done
          fi

          mkdir -p data/output/model_changelogs/${{ matrix.model }}/

          make_model_changelog \
          --model_handle="${{ matrix.model }}" \
          --model_version="${{ matrix.version }}" \
          $MDF_FILES_OPTIONS \
          --output_file_path="data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_changelog_${{ matrix.version }}.xml" \
          --author="GitHub Actions" \
          --_commit="${{ github.sha }}" \
          --latest_version=True

      - name: Get Model PVs and Synonyms
        run: |
          set -e

          MDF_FILES_OPTIONS=""
          if [ -n "${{ toJson(matrix.mdf_files) }}" ] && [ "${{ toJson(matrix.mdf_files) }}" != "null" ] && [ "${{ toJson(matrix.mdf_files) }}" != "[]" ]; then
            for file in $(echo '${{ toJson(matrix.mdf_files) }}' | jq -r '.[]'); do
              MDF_FILES_OPTIONS+=" --mdf_files \"$file\""
            done
          fi

          mkdir -p data/output/model_cde_pvs/${{ matrix.model }}/

          get_pvs_and_synonyms \
          --model_handle="${{ matrix.model }}" \
          --model_version="${{ matrix.version }}" \
          $MDF_FILES_OPTIONS \

      - name: Make Model CDE Changelog
        run: |
          make_model_cde_changelog \
          --model_handle="${{ matrix.model }}" \
          --model_version="${{ matrix.version }}"

      - name: Collect Changelog Files
        id: collect-changelogs
        run : |
          CHANGELOG_FILE="data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_changelog_${{ matrix.version }}.xml"
          CDE_CHANGELOG_FILE="data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_${{ matrix.version }}_cde_changelog.xml"
          # Check if files exist
          CHANGELOG_FILES="[]"
          if [ -f "$CHANGELOG_FILE" ] && [ -f "$CDE_CHANGELOG_FILE" ]; then
            CHANGELOG_FILES="[\"$CHANGELOG_FILE\", \"$CDE_CHANGELOG_FILE\"]"
          elif [ -f "$CHANGELOG_FILE" ]; then
            CHANGELOG_FILES="[\"$CHANGELOG_FILE\"]" 
          elif [ -f "$CDE_CHANGELOG_FILE" ]; then
            CHANGELOG_FILES="[\"$CDE_CHANGELOG_FILE\"]"
          fi
          
          echo "changelog_files=$CHANGELOG_FILES" >> $GITHUB_OUTPUT
          echo "Generated changelog files: $CHANGELOG_FILES"

      - name: Commit Generated Files
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          if [ -f "data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_changelog_${{ matrix.version }}.xml" ]; then
            git add data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_changelog_${{ matrix.version }}.xml
          fi
          
          if [ -f "data/output/model_cde_pvs/${{ matrix.model }}/${{ matrix.model }}_${{ matrix.version }}_cdes.yml" ]; then
            git add data/output/model_cde_pvs/${{ matrix.model }}/${{ matrix.model }}_${{ matrix.version }}_cdes.yml
          fi
          
          if [ -f "data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_${{ matrix.version }}_cde_changelog.xml" ]; then
            git add data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_${{ matrix.version }}_cde_changelog.xml
          fi
          
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Add new files for ${{ matrix.model }} v${{ matrix.version }}"
            git push
          else
            echo "No changes to commit"
          fi

  collect-all-changelogs:
    needs: [generate-changelogs]
    runs-on: ubuntu-latest
    outputs:
      all_changelog_files: ${{ steps.collect-all.outputs.all_changelog_files }}
    steps:
      - name: Collect All Changelog Files
        id: collect-all
        run: |
          ALL_CHANGELOGS='${{ needs.generate-changelogs.outputs.changelog_files }}'
          # Ensure it's a valid JSON array
          if [ -z "$ALL_CHANGELOGS" ] || [ "$ALL_CHANGELOGS" == "null" ]; then
            ALL_CHANGELOGS="[]"
          fi
          echo "all_changelog_files=$ALL_CHANGELOGS" >> $GITHUB_OUTPUT
          echo "All changelog files: $ALL_CHANGELOGS"

  update-mdb-and-dh:
    needs: [determine-models, collect-all-changelogs]
    if: needs.determine-models.outputs.affected_models != '{}' && needs.determine-models.outputs.affected_models != '[]' && needs.collect-all-changelogs.outputs.all_changelog_files != '[]'
    uses: ./.github/workflows/update_mdb_and_dh.yml
    secrets: inherit
    with:
      changelog_files: ${{ needs.collect-all-changelogs.outputs.all_changelog_files }}
      affected_models: ${{ needs.determine-models.outputs.affected_models }}
      mdb_id: # TODO: designate mdb id (either "og-mdb-dev" or "og-mdb-nightly" or given)
name: Generate and Commit Model Updates Changelogs

on:
  push:
    branches:
      - main
    paths:
      - config/mdb_models.yml
  workflow_dispatch:
    inputs:
      models_spec_path:
        description: "Path to YAML files with models & refs their MDFs."
        required: false
        default: "config/mdb_models.yml"
      model:
        description: "Specific model handle to process"
        required: false
        default: ""
      version:
        description: "Specific version to process"
        required: false
        default: ""
      mdf_files:
        description: "Path or URL to specific MDF files to process"
        required: false
        default: ""
      datahub_only:
        description: "Only include datahub models"
        required: false
        default: "false"

jobs:
  determine-models:
    runs-on: ubuntu-latest
    outputs:
      affected_models: ${{ steps.set-matrix.outputs.model_matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.10"

      - name: Install dependencies and project
        run: |
          uv pip install --system -e .
          uv sync --all-extras --dev

      - name: Generate Model Version Matrix
        id: set-matrix
        run: |
          # If specific model/version/mdfs provided, use them; otherwise, generate the full matrix.
          if [ "${{ github.event.inputs.model }}" != "" ] && [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "{\"include\": [{\"model\": \"${{ github.event.inputs.model }}\", \"version\": \"${{ github.event.inputs.version }}\", \"mdf_files\": [${{ github.event.inputs.mdf_files || '[]' }}]}]}" > matrix.json
          else
            generate_model_version_matrix \
              --mdb_uri="${{ secrets.NEO4J_MDB_URI }}" \
              --mdb_user="${{ secrets.NEO4J_MDB_USER }}" \
              --mdb_pass="${{ secrets.NEO4J_MDB_PASS }}" \
              --model_specs_yaml="${{ github.event.inputs.models_spec_path }}" \
              --datahub_only="${{ github.event.inputs.datahub_only }}" \
              > matrix.json
          fi
          MATRIX=$(cat matrix.json)
          echo "model_matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Affected models: $MATRIX"

  generate-changelogs:
    needs: determine-models
    runs-on: ubuntu-latest
    outputs:
      changelog_files: ${{ steps.collect-changelogs.outputs.changelog_files }}
    strategy:
      matrix: ${{ fromJson(needs.determine-models.outputs.affected_models) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.10"

      - name: Install dependencies and project
        run: |
          uv pip install --system -e .
          uv sync --all-extras --dev

      - name: Make Model Changelog
        run: |
          set -e

          MDF_FILES_OPTIONS=""
          if [ -n "${{ toJson(matrix.mdf_files) }}" ] && [ "${{ toJson(matrix.mdf_files) }}" != "null" ] && [ "${{ toJson(matrix.mdf_files) }}" != "[]" ]; then
            for file in $(echo '${{ toJson(matrix.mdf_files) }}' | jq -r '.[]'); do
              MDF_FILES_OPTIONS+=" --mdf_files \"$file\""
            done
          fi

          mkdir -p data/output/model_changelogs/${{ matrix.model }}/

          make_model_changelogs \
          --model_handle="${{ matrix.model }}" \
          --model_version="${{ matrix.version }}" \
          $MDF_FILES_OPTIONS \
          --output_file_path="data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_changelog_${{ matrix.version }}.xml" \
          --author="GitHub Actions" \
          --_commit="${{ github.sha }}" \
          --latest_version=True

      - name: Get Model PVs and Synonyms
        run: |
          set -e

          MDF_FILES_OPTIONS=""
          if [ -n "${{ toJson(matrix.mdf_files) }}" ] && [ "${{ toJson(matrix.mdf_files) }}" != "null" ] && [ "${{ toJson(matrix.mdf_files) }}" != "[]" ]; then
            for file in $(echo '${{ toJson(matrix.mdf_files) }}' | jq -r '.[]'); do
              MDF_FILES_OPTIONS+=" --mdf_files \"$file\""
            done
          fi

          mkdir -p data/output/model_cde_pvs/${{ matrix.model }}/

          get_pvs_and_synonyms \
          --model_handle="${{ matrix.model }}" \
          --model_version="${{ matrix.version }}" \
          $MDF_FILES_OPTIONS \

      - name: Make Model CDE Changelog
        run: |
          make_model_cde_changelog \
          --model_handle="${{ matrix.model }}" \
          --model_version="${{ matrix.version }}"

      - name: Collect Changelog Files
        id: collect-changelogs
        run : |
          CHANGELOG_FILE="data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_changelog_${{ matrix.version }}.xml"
          CDE_CHANGELOG_FILE="data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_${{ matrix.version }}_cde_changelog.xml"
          # Check if files exist
          CHANGELOG_FILES="[]"
          if [ -f "$CHANGELOG_FILE" ] && [ -f "$CDE_CHANGELOG_FILE" ]; then
            CHANGELOG_FILES="[\"$CHANGELOG_FILE\", \"$CDE_CHANGELOG_FILE\"]"
          elif [ -f "$CHANGELOG_FILE" ]; then
            CHANGELOG_FILES="[\"$CHANGELOG_FILE\"]" 
          elif [ -f "$CDE_CHANGELOG_FILE" ]; then
            CHANGELOG_FILES="[\"$CDE_CHANGELOG_FILE\"]"
          fi
          
          echo "changelog_files=$CHANGELOG_FILES" >> $GITHUB_OUTPUT
          echo "Generated changelog files: $CHANGELOG_FILES"

      - name: Commit Generated Files
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          if [ -f "data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_changelog_${{ matrix.version }}.xml" ]; then
            git add data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_changelog_${{ matrix.version }}.xml
          fi
          
          if [ -f "data/output/model_cde_pvs/${{ matrix.model }}/${{ matrix.model }}_${{ matrix.version }}_cdes.yml" ]; then
            git add data/output/model_cde_pvs/${{ matrix.model }}/${{ matrix.model }}_${{ matrix.version }}_cdes.yml
          fi
          
          if [ -f "data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_${{ matrix.version }}_cde_changelog.xml" ]; then
            git add data/output/model_changelogs/${{ matrix.model }}/${{ matrix.model }}_${{ matrix.version }}_cde_changelog.xml
          fi
          
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Add new files for ${{ matrix.model }} v${{ matrix.version }}"
            git push
          else
            echo "No changes to commit"
          fi

  collect-all-changelogs:
    needs: [generate-changelogs]
    runs-on: ubuntu-latest
    outputs:
      all_changelog_files: ${{ steps.collect-all.outputs.all_changelog_files }}
    steps:
      - name: Collect All Changelog Files
        id: collect-all
        run: |
          ALL_CHANGELOGS='${{ needs.generate-changelogs.outputs.changelog_files }}'
          # Ensure it's a valid JSON array
          if [ -z "$ALL_CHANGELOGS" ] || [ "$ALL_CHANGELOGS" == "null" ]; then
            ALL_CHANGELOGS="[]"
          fi
          echo "all_changelog_files=$ALL_CHANGELOGS" >> $GITHUB_OUTPUT
          echo "All changelog files: $ALL_CHANGELOGS"

  liquibase-update:
    needs: [determine-models, collect-all-changelogs]
    if: needs.determine-models.outputs.affected_models != '{}' && needs.determine-models.outputs.affected_models != '[]' && needs.collect-all-changelogs.outputs.all_changelog_files != '[]'
    uses: ./.github/workflows/liquibase_update.yml
    secrets: inherit
    with:
      changelog_files: ${{ needs.collect-all-changelogs.outputs.all_changelog_files }}
      affected_models: ${{ needs.determine-models.outputs.affected_models }}